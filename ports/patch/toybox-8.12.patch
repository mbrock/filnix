diff --git a/lib/lib.h b/lib/lib.h
index e353921bc0c8..7c83bacdb7d7 100644
--- a/lib/lib.h
+++ b/lib/lib.h
@@ -422,7 +422,7 @@ void names_to_pid(char **names, int (*callback)(pid_t pid, char *name),
     int scripts);
 
 pid_t __attribute__((returns_twice)) xvforkwrap(pid_t pid);
-#define XVFORK() xvforkwrap(vfork())
+#define XVFORK() xvforkwrap(({ errno = ENOSYS; -1; }))
 
 // Wrapper to make xfuncs() return (via siglongjmp) instead of exiting.
 // Assigns true/false "did it exit" value to first argument.
diff --git a/lib/portability.c b/lib/portability.c
index b541c5d9ffc8..bc23517ebf9c 100644
--- a/lib/portability.c
+++ b/lib/portability.c
@@ -6,6 +6,8 @@
 
 #include "toys.h"
 
+#include <stdfil.h>
+
 // We can't fork() on nommu systems, and vfork() requires an exec() or exit()
 // before resuming the parent (because they share a heap until then). And no,
 // we can't implement our own clone() call that does the equivalent of fork()
@@ -447,7 +449,8 @@ void xsignal_all_killers(void *handler)
   int i;
 
   for (i = 1; signames[i].num != SIGCHLD; i++)
-    if (signames[i].num != SIGKILL) xsignal(signames[i].num, handler);
+    if (signames[i].num != SIGKILL && !zis_unsafe_signal_for_handlers(signames[i].num))
+      xsignal(signames[i].num, handler);
 }
 
 // Convert a string like "9", "KILL", "SIGHUP", or "SIGRTMIN+2" to a number.
diff --git a/toys/other/oneit.c b/toys/other/oneit.c
index 45eb1fb5a2fe..77955ed16707 100644
--- a/toys/other/oneit.c
+++ b/toys/other/oneit.c
@@ -59,7 +59,7 @@ static void oneit_signaled(int signal)
   // which causes the kernel to panic before the actual reboot happens.
   sync();
   if (getpid()!=1) _exit(127+signal);
-  if (!vfork()) reboot(action);
+  if (!fork()) reboot(action);
 }
 
 void oneit_main(void)
@@ -105,7 +105,7 @@ void oneit_main(void)
   while (!toys.signal) {
 
     // Create a new child process.
-    pid = XVFORK();
+    pid = fork();
     if (pid) {
 
       // pid 1 reaps zombies until it gets its child, then halts system.
diff --git a/toys/posix/ls.c b/toys/posix/ls.c
index 7a8dfd27f84b..a3b674db9cc3 100644
--- a/toys/posix/ls.c
+++ b/toys/posix/ls.c
@@ -329,13 +329,13 @@ static int color_from_mode(mode_t mode)
   return color;
 }
 
-static void zprint(int zap, char *pat, int len, unsigned long arg)
+static void zprint(int zap, char *pat, int len, void *arg)
 {
   char tmp[32];
 
   sprintf(tmp, "%%*%s", zap ? "s" : pat);
   if (zap && pat[strlen(pat)-1]==' ') strcat(tmp, " ");
-  printf(tmp, len, zap ? (unsigned long)"?" : arg);
+  printf(tmp, len, zap ? "?" : arg);
 }
 
 // Display a list of dirtree entries, according to current format
@@ -480,24 +480,24 @@ static void listfiles(int dirfd, struct dirtree *indir)
     }
     width += *len;
 
-    if (FLAG(i)) zprint(zap, "lu ", totals[1], st->st_ino);
+    if (FLAG(i)) zprint(zap, "lu ", totals[1], (void*)st->st_ino);
 
     if (FLAG(s)) {
       print_with_h(tmp, st->st_blocks, 1);
-      zprint(zap, "s ", totals[6], (unsigned long)tmp);
+      zprint(zap, "s ", totals[6], tmp);
     }
 
     if (FLAG(l)||FLAG(o)||FLAG(n)||FLAG(g)) {
       mode_to_string(mode, tmp);
       if (zap) memset(tmp+1, '?', 9);
       printf("%s", tmp);
-      zprint(zap, "ld", totals[2]+1, st->st_nlink);
+      zprint(zap, "ld", totals[2]+1, (void*)st->st_nlink);
 
       // print user
       if (!FLAG(g)) {
         putchar(' ');
         ii = -totals[3];
-        if (zap || FLAG(n)) zprint(zap, "lu", ii, st->st_uid);
+        if (zap || FLAG(n)) zprint(zap, "lu", ii, (void*)st->st_uid);
         else draw_trim_esc(getusername(st->st_uid), ii, abs(ii), TT.escmore,
                            crunch_qb);
       }
@@ -506,7 +506,7 @@ static void listfiles(int dirfd, struct dirtree *indir)
       if (!FLAG(o)) {
         putchar(' ');
         ii = -totals[4];
-        if (zap || FLAG(n)) zprint(zap, "lu", ii, st->st_gid);
+        if (zap || FLAG(n)) zprint(zap, "lu", ii, (void*)st->st_gid);
         else draw_trim_esc(getgroupname(st->st_gid), ii, abs(ii), TT.escmore,
                            crunch_qb);
       }
@@ -522,7 +522,7 @@ static void listfiles(int dirfd, struct dirtree *indir)
           dev_minor(st->st_rdev));
       else {
         print_with_h(tmp, st->st_size, 0);
-        zprint(zap, "s", totals[5]+1, (unsigned long)tmp);
+        zprint(zap, "s", totals[5]+1, tmp);
       }
 
       // print time, always in --time-style=long-iso
@@ -534,7 +534,7 @@ static void listfiles(int dirfd, struct dirtree *indir)
         s += sprintf(s, ":%02d.%09d ", tm->tm_sec, (int)st->st_mtim.tv_nsec);
         strftime(s, sizeof(tmp)-(s-tmp), "%z", tm);
       }
-      zprint(zap, "s ", 17+(TT.l>1)*13, (unsigned long)tmp);
+      zprint(zap, "s ", 17+(TT.l>1)*13, tmp);
     }
 
     if (FLAG(color)) {
@@ -557,7 +557,7 @@ static void listfiles(int dirfd, struct dirtree *indir)
         if (color) printf("\e[%d;%dm", color>>8, color&255);
       }
 
-      zprint(zap, "s", 0, (unsigned long)dt->symlink);
+      zprint(zap, "s", 0, dt->symlink);
       if (!zap && color) printf("\e[0m");
     }
 
