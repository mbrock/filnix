diff --git a/libarchive/archive_rb.c b/libarchive/archive_rb.c
index cf58ac3354d0..1f05a4fadde0 100644
--- a/libarchive/archive_rb.c
+++ b/libarchive/archive_rb.c
@@ -34,6 +34,7 @@
 #include <stddef.h>
 
 #include "archive_rb.h"
+#include <stdfil.h>
 
 /* Keep in sync with archive_rb.h */
 #define	RB_DIR_LEFT		0
@@ -46,9 +47,9 @@
 #define	RB_FLAG_RED		0x1
 #define	RB_FLAG_MASK		(RB_FLAG_POSITION|RB_FLAG_RED)
 #define	RB_FATHER(rb) \
-    ((struct archive_rb_node *)((rb)->rb_info & ~RB_FLAG_MASK))
+    ((struct archive_rb_node *)((uintptr_t)(rb)->rb_info & ~RB_FLAG_MASK))
 #define	RB_SET_FATHER(rb, father) \
-    ((void)((rb)->rb_info = (uintptr_t)(father)|((rb)->rb_info & RB_FLAG_MASK)))
+    ((void)((rb)->rb_info = zretagptr((father), (rb)->rb_info, ~RB_FLAG_MASK)))
 
 #define	RB_SENTINEL_P(rb)	((rb) == NULL)
 #define	RB_LEFT_SENTINEL_P(rb)	RB_SENTINEL_P((rb)->rb_left)
@@ -60,25 +61,25 @@
     (!RB_SENTINEL_P(rb) && !RB_LEFT_SENTINEL_P(rb) && !RB_RIGHT_SENTINEL_P(rb))
 
 #define	RB_POSITION(rb)	\
-    (((rb)->rb_info & RB_FLAG_POSITION) ? RB_DIR_RIGHT : RB_DIR_LEFT)
+    (((uintptr_t)(rb)->rb_info & RB_FLAG_POSITION) ? RB_DIR_RIGHT : RB_DIR_LEFT)
 #define	RB_RIGHT_P(rb)		(RB_POSITION(rb) == RB_DIR_RIGHT)
 #define	RB_LEFT_P(rb)		(RB_POSITION(rb) == RB_DIR_LEFT)
-#define	RB_RED_P(rb) 		(!RB_SENTINEL_P(rb) && ((rb)->rb_info & RB_FLAG_RED) != 0)
-#define	RB_BLACK_P(rb) 		(RB_SENTINEL_P(rb) || ((rb)->rb_info & RB_FLAG_RED) == 0)
-#define	RB_MARK_RED(rb) 	((void)((rb)->rb_info |= RB_FLAG_RED))
-#define	RB_MARK_BLACK(rb) 	((void)((rb)->rb_info &= ~RB_FLAG_RED))
-#define	RB_INVERT_COLOR(rb) 	((void)((rb)->rb_info ^= RB_FLAG_RED))
+#define	RB_RED_P(rb) 		(!RB_SENTINEL_P(rb) && ((uintptr_t)(rb)->rb_info & RB_FLAG_RED) != 0)
+#define	RB_BLACK_P(rb) 		(RB_SENTINEL_P(rb) || ((uintptr_t)(rb)->rb_info & RB_FLAG_RED) == 0)
+#define	RB_MARK_RED(rb) 	((void)((rb)->rb_info = zorptr((rb)->rb_info, RB_FLAG_RED)))
+#define	RB_MARK_BLACK(rb) 	((void)((rb)->rb_info = zandptr((rb)->rb_info, ~RB_FLAG_RED)))
+#define	RB_INVERT_COLOR(rb) 	((void)((rb)->rb_info = zxorptr((rb)->rb_info, RB_FLAG_RED)))
 #define	RB_ROOT_P(rbt, rb)	((rbt)->rbt_root == (rb))
 #define	RB_SET_POSITION(rb, position) \
-    ((void)((position) ? ((rb)->rb_info |= RB_FLAG_POSITION) : \
-    ((rb)->rb_info &= ~RB_FLAG_POSITION)))
-#define	RB_ZERO_PROPERTIES(rb)	((void)((rb)->rb_info &= ~RB_FLAG_MASK))
+    ((void)((position) ? ((rb)->rb_info = zorptr((rb)->rb_info, RB_FLAG_POSITION)) : \
+    ((rb)->rb_info = zandptr((rb)->rb_info, ~RB_FLAG_POSITION))))
+#define	RB_ZERO_PROPERTIES(rb)	((void)((rb)->rb_info = zandptr((rb)->rb_info, ~RB_FLAG_MASK)))
 #define	RB_COPY_PROPERTIES(dst, src) \
-    ((void)((dst)->rb_info ^= ((dst)->rb_info ^ (src)->rb_info) & RB_FLAG_MASK))
+    ((void)((dst)->rb_info = zxorptr((dst)->rb_info, ((uintptr_t)(dst)->rb_info ^ (uintptr_t)(src)->rb_info) & RB_FLAG_MASK)))
 #define RB_SWAP_PROPERTIES(a, b) do { \
-    uintptr_t xorinfo = ((a)->rb_info ^ (b)->rb_info) & RB_FLAG_MASK; \
-    (a)->rb_info ^= xorinfo; \
-    (b)->rb_info ^= xorinfo; \
+    uintptr_t xorinfo = ((uintptr_t)(a)->rb_info ^ (uintptr_t)(b)->rb_info) & RB_FLAG_MASK; \
+    (a)->rb_info = zxorptr((a)->rb_info, xorinfo); \
+    (b)->rb_info = zxorptr((b)->rb_info, xorinfo); \
   } while (/*CONSTCOND*/ 0)
 
 static void __archive_rb_tree_insert_rebalance(struct archive_rb_tree *,
diff --git a/libarchive/archive_rb.h b/libarchive/archive_rb.h
index 8851f1081867..4636767b5101 100644
--- a/libarchive/archive_rb.h
+++ b/libarchive/archive_rb.h
@@ -39,7 +39,7 @@ struct archive_rb_node {
 	 * We put the two flags in the low two bits since we know that
 	 * rb_node will have an alignment of 4 or 8 bytes.
 	 */
-	uintptr_t rb_info;
+	struct archive_rb_node *rb_info;
 };
 
 #define	ARCHIVE_RB_DIR_LEFT		0
diff --git a/libarchive/archive_read_support_format_rar5.c b/libarchive/archive_read_support_format_rar5.c
index e8846a5b0d0d..1a5583c40f08 100644
--- a/libarchive/archive_read_support_format_rar5.c
+++ b/libarchive/archive_read_support_format_rar5.c
@@ -181,7 +181,7 @@ struct cdeque {
 	uint16_t end_pos;
 	uint16_t cap_mask;
 	uint16_t size;
-	size_t* arr;
+	void** arr;
 };
 
 struct decode_table {
@@ -424,7 +424,7 @@ static int cdeque_push_back(struct cdeque* d, void* item) {
 	if(d->size == d->cap_mask + 1)
 		return CDE_OUT_OF_BOUNDS;
 
-	d->arr[d->end_pos] = (size_t) item;
+	d->arr[d->end_pos] = item;
 	d->end_pos = (d->end_pos + 1) & d->cap_mask;
 	d->size++;
 
