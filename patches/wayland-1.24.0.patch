diff --git a/src/wayland-util.c b/src/wayland-util.c
index 7231346b197a..50a71804190a 100644
--- a/src/wayland-util.c
+++ b/src/wayland-util.c
@@ -183,7 +183,7 @@ map_entry_is_free(union map_entry entry)
 static inline void *
 map_entry_get_data(union map_entry entry)
 {
-	return (void *)(entry.next & ~(uintptr_t)0x3);
+	return (void *)((uintptr_t)entry.data & ~(uintptr_t)0x3);
 }
 
 static inline uint32_t
diff --git a/tests/test-runner.c b/tests/test-runner.c
index 9a50d1dd19dc..c2e612adf079 100644
--- a/tests/test-runner.c
+++ b/tests/test-runner.c
@@ -63,14 +63,14 @@ static int timeouts_enabled = 1;
 /* set to one if the output goes to the terminal */
 static int is_atty = 0;
 
-extern const struct test __start_test_section, __stop_test_section;
+struct test *first_test = NULL;
 
 static const struct test *
 find_test(const char *name)
 {
 	const struct test *t;
 
-	for (t = &__start_test_section; t < &__stop_test_section; t++)
+        for (t = first_test; t; t = t->next)
 		if (strcmp(t->name, name) == 0)
 			return t;
 
@@ -87,7 +87,7 @@ usage(const char *name, int status)
 		"only that test without forking.  Available tests:\n\n",
 		name);
 
-	for (t = &__start_test_section; t < &__stop_test_section; t++)
+        for (t = first_test; t; t = t->next)
 		fprintf(stderr, "  %s\n", t->name);
 
 	fprintf(stderr, "\n");
@@ -356,7 +356,8 @@ int main(int argc, char *argv[])
 	set_xdg_runtime_dir();
 
 	pass = 0;
-	for (t = &__start_test_section; t < &__stop_test_section; t++) {
+        total = 0;
+        for (t = first_test; t; t = t->next, total++) {
 		int success = 0;
 
 		pid = fork();
@@ -405,7 +406,6 @@ int main(int argc, char *argv[])
 		fprintf(stderr, "----------------------------------------\n");
 	}
 
-	total = &__stop_test_section - &__start_test_section;
 	fprintf(stderr, "%d tests, %d pass, %d fail\n",
 		total, pass, total - pass);
 
diff --git a/tests/test-runner.h b/tests/test-runner.h
index d0734009601e..fc0adcb2652b 100644
--- a/tests/test-runner.h
+++ b/tests/test-runner.h
@@ -30,32 +30,54 @@
 #endif
 
 #include <unistd.h>
+#include <stdlib.h>
 
 struct test {
 	const char *name;
 	void (*run)(void);
 	int must_fail;
+	struct test *next;
 } __attribute__ ((aligned (16)));
 
-#define TEST(name)							\
-	static void name(void);						\
+extern struct test *first_test;
+
+#define TEST(passed_name)						\
+	static void passed_name(void);					\
+									\
+	static void							\
+	register_test_##passed_name(void) __attribute__((constructor));	\
 									\
-	const struct test test##name					\
-		 __attribute__ ((used, section ("test_section"))) = {	\
-		#name, name, 0						\
-	};								\
+	static void							\
+	register_test_##passed_name(void)				\
+	{								\
+		struct test* test = malloc(sizeof(struct test));	\
+		test->name = #passed_name;				\
+		test->run = passed_name;				\
+		test->must_fail = 0;					\
+		test->next = first_test;				\
+		first_test = test;					\
+	}								\
 									\
-	static void name(void)
+	static void passed_name(void)
 
-#define FAIL_TEST(name)							\
-	static void name(void);						\
+#define FAIL_TEST(passed_name)						\
+	static void passed_name(void);					\
+									\
+	static void							\
+	register_test_##passed_name(void) __attribute__((constructor));	\
 									\
-	const struct test test##name					\
-		 __attribute__ ((used, section ("test_section"))) = {	\
-		#name, name, 1						\
-	};								\
+	static void							\
+	register_test_##passed_name(void)				\
+	{								\
+		struct test* test = malloc(sizeof(struct test));	\
+		test->name = #passed_name;				\
+		test->run = passed_name;				\
+		test->must_fail = 1;					\
+		test->next = first_test;				\
+		first_test = test;					\
+	}								\
 									\
-	static void name(void)
+	static void passed_name(void)
 
 int
 count_open_fds(void);
